.\" LOG.3 --Manual page for "log" library
.\"
.\" alias: debug info notice warning err crit alert emerg
.\" alias: log_msg log_quit
.\" alias: log_sys log_sys_quit log_sys_abort
.\" alias: log_init log_config
.\"
.TH log 3 "\(co 2015 Tim Rose" "apex" "Extended C Library"
.PP
.SH NAME
debug, info, notice, warning, err, crit, alert, emerg,
log_msg, log_quit,
log_sys, log_sys_quit, log_sys_abort \- logging functions
.SH LIBRARY
The application support library (libapex, -lapplique)
.SH SYNOPSIS
.nf
.B #include \(dqlog.h\(dq
.sp
.BI "int debug(const char *" fmt ", ...);"
.BI "int info(const char *" fmt ", ...);"
.BI "int notice(const char *" fmt ", ...);"
.BI "int warning(const char *" fmt ", ...);"
.BI "int err(const char *" fmt ", ...);"
.BI "int crit(const char *" fmt ", ...);"
.BI "int alert(const char *" fmt ", ...);"
.BI "int emerg(const char *" fmt ", ...);"
.sp
.BI "int trace_debug(const char *" fmt ", ...);"
.BI "int trace_info(const char *" fmt ", ...);"
.BI "int trace_notice(const char *" fmt ", ...);"
.BI "int trace_warning(const char *" fmt ", ...);"
.BI "int trace_err(const char *" fmt ", ...);"
.BI "int trace_crit(const char *" fmt ", ...);"
.BI "int trace_alert(const char *" fmt ", ...);"
.BI "int trace_emerg(const char *" fmt ", ...);"
.sp
.BI "int log_msg(int " priority ",  const char *" fmt ", ...);"
.BI "int log_sys(const char *" fmt ", ...);"
.BI "int log_quit(int " status ", const char *" fmt ", ...);"
.BI "int log_sys_quit(int " status ",  const char *" fmt ", ...);"
.BI "int log_sys_abort(const char *" fmt ", ...);"
.sp
.BI "LogConfig *log_init(const char *" identity ");"
.BI "LogConfig *log_config(LogConfig *" new_config ");"
.BI "LogOutputProc log_handler(const char *" name ");"
.HP
.BI "int log_sprintf(LogContext *" caller ", char *" str ", size_t " len ","
.BI "int " sys_errno ", size_t " priority ", const char *" fmt ", va_list " args ");"
.fi
.SH DESCRIPTION
These logging functions provide a simple logging interface styled around
the features of
.BR syslog (3).
The output of the logged messages may be directed to
.BR syslog
or
.IR stderr ,
or to a custom handling function.  The messages are filtered by
priority, and have some customisable formatting/decoration, described
below.
.PP
The functions named after
.B syslog
priorities (i.e.
.BR debug (),\ ...,
.BR emerg ())
log a message of the eponymous priority.  If the priority is equal or
higher than the current threshold priority, the message will be
formatted and printed via an output handler function, which may add
some additional formatting.  The "trace" variants
(i.e.
.BR trace_debug (),\ ...,
.BR trac_emerg ())
are macros that add caller context (i.e. function, file, line number),
which is formatted as a prefix to the message.
.PP
The above functions and macros are intended as the main method for
logging, however the
.BR log_msg (),\ ...,
.BR log_sys_abort ()
functions provide more specialised behaviour.
The
.BR log_msg ()
function logs a message at the specified
.B syslog
priority.
The logged message is formatted via
.BR sprintf (3).
The
.BR log_sys ()
function behaves similarly, but it appends the system
.BR errno (3)-related
text to the formatted message too.
The variants
.BR log_sys_quit (),
.BR log_sys_abort (),
never return; for
.BR log_sys_quit ()
the program exits with the specified status, and for
.BR log_sys_abort ()
it calls
.BR abort (3).
.PP
The logging system initialises itself from a set of environment
variables, described below in the
.SM ENVIRONMENT
section.
In some cases it's useful to programmatically
control the logger behaviour, and the
.BR log_init ()
and
.BR log_config ()
functions are provides for this.
.SH "RETURN VALUE"
All the logging functions (except as noted above)
return the number of characters in the
message, or -1 if an error occurs.
.PP
The old configuration is returned by
.BR log_config ().
.SH OUTPUT
.SS Logging to syslog
.SS Logging to stderr
.SS Custom log handling
.SS Custom configuration
.SS The assert macro
.SH "ENVIRONMENT"
The logging system initialises its configuration from the following
environment variables:
.TP
LOG_IDENT
Specifies the
.BR syslog
identity to use when logging.  Messages handled by
.B syslog
prefix the logged message with the identity and process id.
.TP
LOG_FACILITY
Specifies the
.BR syslog
facility to use when logging.
Messages handled by
.B syslog
typically use the mesasge facility to direct a message to a particular
log file.
.TP
LOG_LEVEL
Defines the threshold priority for displaying log messages; messages
at the specified level and "higher" are displayed, those at lower
levels are supressed.
The default
.SM LOG_LEVEL
is "notice":
.IR notice ,
.IR warning ,
.IR err ,
.IR crit ,
.I alert
and
.I emerg
messages are displayed, but
.I info
and
.I debug
messages are not.
.TP
LOG_OUTPUT
Specifies the output handler to process the logged messages.  The log
library defines two handlers:
.TP
LOG_TIMESTAMP
If this variable is defined, it will be used as a
.BR strftime (3)
specification to format the current time.
The formatted time is prefixed to the message text when the
.I stderr
handler is used.
.TP
LOG_COLORS
This variable is used by the
.I stderr
output handler; it defines
.SM ANSI
.IR sgr -style
codes to use when printing log messages.  The format is a
colon-separated list of directives of the form:
.IR priority = code .
The default value is:
.RS
.PP
debug=36:notice=1:warning=1;33:err=1;31:crit=1;33;41:alert=1;5;33;41:emerg=1;5;37;41
.PP
This corresponds to the following settings:
.TP 10
debug
cyan
.TP
info
not specified (= none)
.TP
notice
bold
.TP
warning
bold yellow
.TP
err
bold red
.TP
crit
bold yellow on red background
.TP
alert
bold and flashing yellow on red background
.TP
emerg
bold and flashing white on red background
.RE
.SH "ERRORS"
.SH EXAMPLES
In typical usage, the
.BR syslog -named
log functions are interspersed with the program code:
.PP
.EX
#include <stdio.h>
#include <log.h>
#
FILE *open_file(const char *path, const char *mode)
{
    FILE *file;
#
    info("opening file \\"%s\\" (mode: \\"%s\\")", path, mode);
#
    if ((file = fopen(path, mode)) == NULL)
    {
        log_sys("cannot open file \\"%s\\"", path);
    }
    else
    {
        debug("open_file(\\"%s\\"): %d", path, fileno(file));
    }
    return file;    /* possibly NULL */
}
.EE
.PP
By default, the log configuration will be intialised from the
environment variables as described above.  In most circumstances this
is sufficient, however there may be occasions where a custom approach
is required:
.PP
.EX
#include <libgen.h>
#include <log.h>
#
int main(int argc, char *argv[])
{
    LogConfig conf = log_init(basename(argv[0]));
#
    conf.facility = LOG_LOCAL0;
    log_config(&conf);
#
    log_msg(LOG_CRIT, "goodbye, world");
    exit(1);
}
.EE
.SH "SEE ALSO"
.BR syslog (3),
.BR sprintf (3),
.BR strftime (3)
